package mocks

import (
	"io"

	"github.com/compozed/deployadactyl/structs"
	"github.com/stretchr/testify/mock"
)

// Pusher is an autogenerated mock type for the Pusher type
type Pusher struct {
	mock.Mock
}

// CleanUp provides a mock function with given fields:
func (_m *Pusher) CleanUp() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FinishPush provides a mock function with given fields: foundationURL, deploymentInfo
func (_m *Pusher) FinishPush(foundationURL string, deploymentInfo structs.DeploymentInfo) error {
	ret := _m.Called(foundationURL, deploymentInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, structs.DeploymentInfo) error); ok {
		r0 = rf(foundationURL, deploymentInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: foundationURL, deploymentInfo, out
func (_m *Pusher) Login(foundationURL string, deploymentInfo structs.DeploymentInfo, out io.Writer) error {
	ret := _m.Called(foundationURL, deploymentInfo, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, structs.DeploymentInfo, io.Writer) error); ok {
		r0 = rf(foundationURL, deploymentInfo, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Push provides a mock function with given fields: appPath, foundationURL, domain, deploymentInfo, out
func (_m *Pusher) Push(appPath string, foundationURL string, domain string, deploymentInfo structs.DeploymentInfo, out io.Writer) error {
	ret := _m.Called(appPath, foundationURL, domain, deploymentInfo, out)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, structs.DeploymentInfo, io.Writer) error); ok {
		r0 = rf(appPath, foundationURL, domain, deploymentInfo, out)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unpush provides a mock function with given fields: foundationURL, deploymentInfo
func (_m *Pusher) Unpush(foundationURL string, deploymentInfo structs.DeploymentInfo) error {
	ret := _m.Called(foundationURL, deploymentInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, structs.DeploymentInfo) error); ok {
		r0 = rf(foundationURL, deploymentInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
