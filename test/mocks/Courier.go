package mocks

import "github.com/stretchr/testify/mock"

// Courier is an autogenerated mock type for the Courier type
type Courier struct {
	mock.Mock
}

// CleanUp provides a mock function with given fields:
func (_m *Courier) CleanUp() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: appName
func (_m *Courier) Delete(appName string) ([]byte, error) {
	ret := _m.Called(appName)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(appName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exists provides a mock function with given fields: appName
func (_m *Courier) Exists(appName string) bool {
	ret := _m.Called(appName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(appName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Login provides a mock function with given fields: api, username, password, org, space, skipSSL
func (_m *Courier) Login(api string, username string, password string, org string, space string, skipSSL bool) ([]byte, error) {
	ret := _m.Called(api, username, password, org, space, skipSSL)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, bool) []byte); ok {
		r0 = rf(api, username, password, org, space, skipSSL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string, string, bool) error); ok {
		r1 = rf(api, username, password, org, space, skipSSL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MapRoute provides a mock function with given fields: appName, domain
func (_m *Courier) MapRoute(appName string, domain string) ([]byte, error) {
	ret := _m.Called(appName, domain)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(appName, domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appName, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Push provides a mock function with given fields: appName, appLocation
func (_m *Courier) Push(appName string, appLocation string) ([]byte, error) {
	ret := _m.Called(appName, appLocation)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(appName, appLocation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(appName, appLocation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rename provides a mock function with given fields: oldName, newName
func (_m *Courier) Rename(oldName string, newName string) ([]byte, error) {
	ret := _m.Called(oldName, newName)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, string) []byte); ok {
		r0 = rf(oldName, newName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(oldName, newName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
